
# specify workflow rules
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - when: always

# define variables
variables:
  DB_IMAGE_NAME: mssqldb_gitlab
  DATAINPUT_IMAGE_NAME: datainputapp_gitlab
  WEBAPP_IMAGE_NAME: webapp_gitlab
   

stages:          # List of stages for jobs, and their order of execution
  - build
  # - test
  # - deploy

build-job:       # This job runs in the build stage, which runs first.
  image: docker:dind
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
      echo "========= Building Images Started ========="
  script:
    #- echo "CI_PIPELINE_IID's value is ${CI_PIPELINE_IID}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    - docker build -t $CI_REGISTRY_IMAGE/$DB_IMAGE_NAME:v$CI_PIPELINE_IID ./File2DB/db/
    - docker push $CI_REGISTRY_IMAGE/$DB_IMAGE_NAME:v$CI_PIPELINE_IID

    - echo "===== ${DB_IMAGE_NAME}:v${CI_PIPELINE_IID} has been pushed ====="

    - docker build -t $CI_REGISTRY_IMAGE/$DATAINPUT_IMAGE_NAME:v$CI_PIPELINE_IID ./File2DB/datainputapp/
    - docker push $CI_REGISTRY_IMAGE/$DATAINPUT_IMAGE_NAME:v$CI_PIPELINE_IID

    - echo "===== ${DATAINPUT_IMAGE_NAME}:v${CI_PIPELINE_IID} has been pushed ====="

    - docker build -t $CI_REGISTRY_IMAGE/$WEBAPP_IMAGE_NAME:v$CI_PIPELINE_IID ./File2DB/webapp/
    - docker push $CI_REGISTRY_IMAGE/$WEBAPP_IMAGE_NAME:v$CI_PIPELINE_IID

    - echo "===== ${WEBAPP_IMAGE_NAME}:v${CI_PIPELINE_IID} has been pushed ====="
    
  after_script:
      echo "========= Building Images Completed ========="


# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
